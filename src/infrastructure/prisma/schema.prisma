generator client {
  provider = "prisma-client"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(ulid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  plans     Plan[]
  DraftPlan DraftPlan[]
  Metric    Metric[]
}

enum MetricType {
  STRING
  NUMBER
  BOOLEAN
}

model Metric {
  id               String            @id @default(ulid())
  userId           String
  name             String
  type             MetricType
  isDraft          Boolean
  user             User              @relation(fields: [userId], references: [id])
  actionPlans      ActionPlan[]
  draftActionPlans DraftActionPlan[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Plan {
  id              String         @id @default(ulid())
  userId          String
  goal            String
  periodStartDate DateTime
  periodEndDate   DateTime
  actionPlans     ActionPlan[]
  planReminders   PlanReminder[]
  user            User           @relation(fields: [userId], references: [id])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

enum ActionPlanLevel {
  BASELINE
  STRETCH
}

model ActionPlan {
  id               String          @id @default(ulid())
  planId           String
  metricId         String
  date             DateTime
  when             String
  what             String
  level            ActionPlanLevel
  remindTimeHour   Int?
  remindTimeMinute Int?
  plan             Plan            @relation(fields: [planId], references: [id], onDelete: Cascade)
  metric           Metric          @relation(fields: [metricId], references: [id])
}

model PlanReminder {
  id     String   @id @default(ulid())
  name   String
  date   DateTime
  hour   Int
  time   Int
  plan   Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId String
}

enum PeriodSettingType {
  AUTO
  SELECTED_END_DAY_OF_WEEK
}

model DraftPlan {
  id                     String              @id @default(ulid())
  user                   User                @relation(fields: [userId], references: [id])
  userId                 String              @unique
  goal                   String
  periodSettingType      PeriodSettingType
  periodSettingDayOfWeek Int?
  draftActionPlans       DraftActionPlan[]
  draftPlanReminders     DraftPlanReminder[]
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
}

enum DateSettingType {
  EVERY_DAY
  WEEKDAYS
  WEEKENDS_AND_HOLIDAYS
  SELECTED_DAY_OF_WEEK
}

model DraftActionPlan {
  id                   String          @id @default(ulid())
  draftPlanId          String
  metricId             String
  dateSettingType      DateSettingType
  dateSettingDayOfWeek Int?
  when                 String
  what                 String
  level                ActionPlanLevel
  remindTimeHour       Int?
  remindTimeMinute     Int?
  draftPlan            DraftPlan       @relation(fields: [draftPlanId], references: [id], onDelete: Cascade)
  metric               Metric          @relation(fields: [metricId], references: [id])
}

model DraftPlanReminder {
  id                   String          @id @default(ulid())
  draftPlanId          String
  name                 String
  dateSettingType      DateSettingType
  dateSettingDayOfWeek Int?
  hour                 Int
  minute               Int
  draftPlan            DraftPlan       @relation(fields: [draftPlanId], references: [id], onDelete: Cascade)
}
